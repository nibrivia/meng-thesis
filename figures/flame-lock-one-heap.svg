<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="726" onload="init(evt)" viewBox="0 0 1200 726" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="726" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="709.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="709.00"> </text><svg id="frames" x="10" width="1180"><g><title>[[kernel.kallsyms]] (377 samples, 0.23%)</title><rect x="0.0534%" y="645" width="0.2286%" height="15" fill="rgb(227,0,7)"/><text x="0.3034%" y="655.50"></text></g><g><title>__lll_lock_wait (192 samples, 0.12%)</title><rect x="0.3341%" y="629" width="0.1164%" height="15" fill="rgb(217,0,24)"/><text x="0.5841%" y="639.50"></text></g><g><title>[[kernel.kallsyms]] (175 samples, 0.11%)</title><rect x="0.3444%" y="613" width="0.1061%" height="15" fill="rgb(221,193,54)"/><text x="0.5944%" y="623.50"></text></g><g><title>[unknown] (595 samples, 0.36%)</title><rect x="0.2831%" y="645" width="0.3607%" height="15" fill="rgb(248,212,6)"/><text x="0.5331%" y="655.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (210 samples, 0.13%)</title><rect x="0.8452%" y="373" width="0.1273%" height="15" fill="rgb(208,68,35)"/><text x="1.0952%" y="383.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (210 samples, 0.13%)</title><rect x="0.8452%" y="357" width="0.1273%" height="15" fill="rgb(232,128,0)"/><text x="1.0952%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (210 samples, 0.13%)</title><rect x="0.8452%" y="341" width="0.1273%" height="15" fill="rgb(207,160,47)"/><text x="1.0952%" y="351.50"></text></g><g><title>hashbrown::map::make_hash (494 samples, 0.30%)</title><rect x="0.8361%" y="389" width="0.2995%" height="15" fill="rgb(228,23,34)"/><text x="1.0861%" y="399.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (194 samples, 0.12%)</title><rect x="1.0180%" y="373" width="0.1176%" height="15" fill="rgb(218,30,26)"/><text x="1.2680%" y="383.50"></text></g><g><title>core::hash::Hasher::write_usize (165 samples, 0.10%)</title><rect x="1.0355%" y="357" width="0.1000%" height="15" fill="rgb(220,122,19)"/><text x="1.2855%" y="367.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (165 samples, 0.10%)</title><rect x="1.0355%" y="341" width="0.1000%" height="15" fill="rgb(250,228,42)"/><text x="1.2855%" y="351.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (165 samples, 0.10%)</title><rect x="1.0355%" y="325" width="0.1000%" height="15" fill="rgb(240,193,28)"/><text x="1.2855%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (165 samples, 0.10%)</title><rect x="1.0355%" y="309" width="0.1000%" height="15" fill="rgb(216,20,37)"/><text x="1.2855%" y="319.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (648 samples, 0.39%)</title><rect x="0.8306%" y="453" width="0.3929%" height="15" fill="rgb(206,188,39)"/><text x="1.0806%" y="463.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (647 samples, 0.39%)</title><rect x="0.8312%" y="437" width="0.3923%" height="15" fill="rgb(217,207,13)"/><text x="1.0812%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (647 samples, 0.39%)</title><rect x="0.8312%" y="421" width="0.3923%" height="15" fill="rgb(231,73,38)"/><text x="1.0812%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (647 samples, 0.39%)</title><rect x="0.8312%" y="405" width="0.3923%" height="15" fill="rgb(225,20,46)"/><text x="1.0812%" y="415.50"></text></g><g><title>&lt;T as core::slice::SliceContains&gt;::slice_contains::_{{closure}} (206 samples, 0.12%)</title><rect x="1.3896%" y="405" width="0.1249%" height="15" fill="rgb(210,31,41)"/><text x="1.6396%" y="415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for usize&gt;::eq (206 samples, 0.12%)</title><rect x="1.3896%" y="389" width="0.1249%" height="15" fill="rgb(221,200,47)"/><text x="1.6396%" y="399.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (242 samples, 0.15%)</title><rect x="1.3690%" y="453" width="0.1467%" height="15" fill="rgb(226,26,5)"/><text x="1.6190%" y="463.50"></text></g><g><title>&lt;T as core::slice::SliceContains&gt;::slice_contains (242 samples, 0.15%)</title><rect x="1.3690%" y="437" width="0.1467%" height="15" fill="rgb(249,33,26)"/><text x="1.6190%" y="447.50"></text></g><g><title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (242 samples, 0.15%)</title><rect x="1.3690%" y="421" width="0.1467%" height="15" fill="rgb(235,183,28)"/><text x="1.6190%" y="431.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (597 samples, 0.36%)</title><rect x="1.5466%" y="389" width="0.3620%" height="15" fill="rgb(221,5,38)"/><text x="1.7966%" y="399.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (597 samples, 0.36%)</title><rect x="1.5466%" y="373" width="0.3620%" height="15" fill="rgb(247,18,42)"/><text x="1.7966%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (597 samples, 0.36%)</title><rect x="1.5466%" y="357" width="0.3620%" height="15" fill="rgb(241,131,45)"/><text x="1.7966%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (371 samples, 0.22%)</title><rect x="1.6837%" y="341" width="0.2249%" height="15" fill="rgb(249,31,29)"/><text x="1.9337%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (203 samples, 0.12%)</title><rect x="2.0759%" y="309" width="0.1231%" height="15" fill="rgb(225,111,53)"/><text x="2.3259%" y="319.50"></text></g><g><title>hashbrown::map::make_hash (1,252 samples, 0.76%)</title><rect x="1.5157%" y="405" width="0.7591%" height="15" fill="rgb(238,160,17)"/><text x="1.7657%" y="415.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (500 samples, 0.30%)</title><rect x="1.9716%" y="389" width="0.3031%" height="15" fill="rgb(214,148,48)"/><text x="2.2216%" y="399.50"></text></g><g><title>core::hash::Hasher::write_usize (463 samples, 0.28%)</title><rect x="1.9941%" y="373" width="0.2807%" height="15" fill="rgb(232,36,49)"/><text x="2.2441%" y="383.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (462 samples, 0.28%)</title><rect x="1.9947%" y="357" width="0.2801%" height="15" fill="rgb(209,103,24)"/><text x="2.2447%" y="367.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (462 samples, 0.28%)</title><rect x="1.9947%" y="341" width="0.2801%" height="15" fill="rgb(229,88,8)"/><text x="2.2447%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (462 samples, 0.28%)</title><rect x="1.9947%" y="325" width="0.2801%" height="15" fill="rgb(213,181,19)"/><text x="2.2447%" y="335.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (231 samples, 0.14%)</title><rect x="2.6228%" y="389" width="0.1401%" height="15" fill="rgb(254,191,54)"/><text x="2.8728%" y="399.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (2,059 samples, 1.25%)</title><rect x="1.5157%" y="453" width="1.2483%" height="15" fill="rgb(241,83,37)"/><text x="1.7657%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (2,059 samples, 1.25%)</title><rect x="1.5157%" y="437" width="1.2483%" height="15" fill="rgb(233,36,39)"/><text x="1.7657%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (2,059 samples, 1.25%)</title><rect x="1.5157%" y="421" width="1.2483%" height="15" fill="rgb(226,3,54)"/><text x="1.7657%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (807 samples, 0.49%)</title><rect x="2.2748%" y="405" width="0.4893%" height="15" fill="rgb(245,192,40)"/><text x="2.5248%" y="415.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (204 samples, 0.12%)</title><rect x="2.7738%" y="405" width="0.1237%" height="15" fill="rgb(238,167,29)"/><text x="3.0238%" y="415.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (204 samples, 0.12%)</title><rect x="2.7738%" y="389" width="0.1237%" height="15" fill="rgb(232,182,51)"/><text x="3.0238%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (204 samples, 0.12%)</title><rect x="2.7738%" y="373" width="0.1237%" height="15" fill="rgb(231,60,39)"/><text x="3.0238%" y="383.50"></text></g><g><title>hashbrown::map::make_hash (450 samples, 0.27%)</title><rect x="2.7720%" y="421" width="0.2728%" height="15" fill="rgb(208,69,12)"/><text x="3.0220%" y="431.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (190 samples, 0.12%)</title><rect x="2.9296%" y="405" width="0.1152%" height="15" fill="rgb(235,93,37)"/><text x="3.1796%" y="415.50"></text></g><g><title>core::hash::Hasher::write_usize (176 samples, 0.11%)</title><rect x="2.9381%" y="389" width="0.1067%" height="15" fill="rgb(213,116,39)"/><text x="3.1881%" y="399.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (168 samples, 0.10%)</title><rect x="2.9429%" y="373" width="0.1019%" height="15" fill="rgb(222,207,29)"/><text x="3.1929%" y="383.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (168 samples, 0.10%)</title><rect x="2.9429%" y="357" width="0.1019%" height="15" fill="rgb(206,96,30)"/><text x="3.1929%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (168 samples, 0.10%)</title><rect x="2.9429%" y="341" width="0.1019%" height="15" fill="rgb(218,138,4)"/><text x="3.1929%" y="351.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (601 samples, 0.36%)</title><rect x="2.7641%" y="453" width="0.3644%" height="15" fill="rgb(250,191,14)"/><text x="3.0141%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_mut (589 samples, 0.36%)</title><rect x="2.7713%" y="437" width="0.3571%" height="15" fill="rgb(239,60,40)"/><text x="3.0213%" y="447.50"></text></g><g><title>rustasim::network::World::new_from_network (4,065 samples, 2.46%)</title><rect x="0.6657%" y="485" width="2.4646%" height="15" fill="rgb(206,27,48)"/><text x="0.9157%" y="495.50">ru..</text></g><g><title>rustasim::network::routing::route_all (4,059 samples, 2.46%)</title><rect x="0.6693%" y="469" width="2.4609%" height="15" fill="rgb(225,35,8)"/><text x="0.9193%" y="479.50">ru..</text></g><g><title>_start (4,066 samples, 2.47%)</title><rect x="0.6657%" y="645" width="2.4652%" height="15" fill="rgb(250,213,24)"/><text x="0.9157%" y="655.50">_s..</text></g><g><title>__libc_start_main (4,066 samples, 2.47%)</title><rect x="0.6657%" y="629" width="2.4652%" height="15" fill="rgb(247,123,22)"/><text x="0.9157%" y="639.50">__..</text></g><g><title>main (4,066 samples, 2.47%)</title><rect x="0.6657%" y="613" width="2.4652%" height="15" fill="rgb(231,138,38)"/><text x="0.9157%" y="623.50">ma..</text></g><g><title>std::rt::lang_start_internal (4,066 samples, 2.47%)</title><rect x="0.6657%" y="597" width="2.4652%" height="15" fill="rgb(231,145,46)"/><text x="0.9157%" y="607.50">st..</text></g><g><title>std::panic::catch_unwind (4,066 samples, 2.47%)</title><rect x="0.6657%" y="581" width="2.4652%" height="15" fill="rgb(251,118,11)"/><text x="0.9157%" y="591.50">st..</text></g><g><title>std::panicking::try (4,066 samples, 2.47%)</title><rect x="0.6657%" y="565" width="2.4652%" height="15" fill="rgb(217,147,25)"/><text x="0.9157%" y="575.50">st..</text></g><g><title>std::panicking::try::do_call (4,066 samples, 2.47%)</title><rect x="0.6657%" y="549" width="2.4652%" height="15" fill="rgb(247,81,37)"/><text x="0.9157%" y="559.50">st..</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (4,066 samples, 2.47%)</title><rect x="0.6657%" y="533" width="2.4652%" height="15" fill="rgb(209,12,38)"/><text x="0.9157%" y="543.50">st..</text></g><g><title>std::rt::lang_start::_{{closure}} (4,066 samples, 2.47%)</title><rect x="0.6657%" y="517" width="2.4652%" height="15" fill="rgb(227,1,9)"/><text x="0.9157%" y="527.50">st..</text></g><g><title>rustasim::network::build_network (4,066 samples, 2.47%)</title><rect x="0.6657%" y="501" width="2.4652%" height="15" fill="rgb(248,47,43)"/><text x="0.9157%" y="511.50">ru..</text></g><g><title>[[kernel.kallsyms]] (193 samples, 0.12%)</title><rect x="3.1309%" y="629" width="0.1170%" height="15" fill="rgb(221,10,30)"/><text x="3.3809%" y="639.50"></text></g><g><title>[[kernel.kallsyms]] (192 samples, 0.12%)</title><rect x="3.1315%" y="613" width="0.1164%" height="15" fill="rgb(210,229,1)"/><text x="3.3815%" y="623.50"></text></g><g><title>[[kernel.kallsyms]] (192 samples, 0.12%)</title><rect x="3.1315%" y="597" width="0.1164%" height="15" fill="rgb(222,148,37)"/><text x="3.3815%" y="607.50"></text></g><g><title>[[kernel.kallsyms]] (190 samples, 0.12%)</title><rect x="3.1327%" y="581" width="0.1152%" height="15" fill="rgb(234,67,33)"/><text x="3.3827%" y="591.50"></text></g><g><title>[[kernel.kallsyms]] (188 samples, 0.11%)</title><rect x="3.1339%" y="565" width="0.1140%" height="15" fill="rgb(247,98,35)"/><text x="3.3839%" y="575.50"></text></g><g><title>[[kernel.kallsyms]] (188 samples, 0.11%)</title><rect x="3.1339%" y="549" width="0.1140%" height="15" fill="rgb(247,138,52)"/><text x="3.3839%" y="559.50"></text></g><g><title>[[kernel.kallsyms]] (188 samples, 0.11%)</title><rect x="3.1339%" y="533" width="0.1140%" height="15" fill="rgb(213,79,30)"/><text x="3.3839%" y="543.50"></text></g><g><title>[[kernel.kallsyms]] (188 samples, 0.11%)</title><rect x="3.1339%" y="517" width="0.1140%" height="15" fill="rgb(246,177,23)"/><text x="3.3839%" y="527.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::read (1,392 samples, 0.84%)</title><rect x="4.6217%" y="357" width="0.8440%" height="15" fill="rgb(230,62,27)"/><text x="4.8717%" y="367.50"></text></g><g><title>core::ptr::read (1,392 samples, 0.84%)</title><rect x="4.6217%" y="341" width="0.8440%" height="15" fill="rgb(216,154,8)"/><text x="4.8717%" y="351.50"></text></g><g><title>[[kernel.kallsyms]] (442 samples, 0.27%)</title><rect x="5.1977%" y="325" width="0.2680%" height="15" fill="rgb(244,35,45)"/><text x="5.4477%" y="335.50"></text></g><g><title>[[kernel.kallsyms]] (431 samples, 0.26%)</title><rect x="5.2044%" y="309" width="0.2613%" height="15" fill="rgb(251,115,12)"/><text x="5.4544%" y="319.50"></text></g><g><title>[[kernel.kallsyms]] (426 samples, 0.26%)</title><rect x="5.2074%" y="293" width="0.2583%" height="15" fill="rgb(240,54,50)"/><text x="5.4574%" y="303.50"></text></g><g><title>[[kernel.kallsyms]] (425 samples, 0.26%)</title><rect x="5.2080%" y="277" width="0.2577%" height="15" fill="rgb(233,84,52)"/><text x="5.4580%" y="287.50"></text></g><g><title>[[kernel.kallsyms]] (414 samples, 0.25%)</title><rect x="5.2147%" y="261" width="0.2510%" height="15" fill="rgb(207,117,47)"/><text x="5.4647%" y="271.50"></text></g><g><title>[[kernel.kallsyms]] (400 samples, 0.24%)</title><rect x="5.2232%" y="245" width="0.2425%" height="15" fill="rgb(249,43,39)"/><text x="5.4732%" y="255.50"></text></g><g><title>[[kernel.kallsyms]] (388 samples, 0.24%)</title><rect x="5.2305%" y="229" width="0.2352%" height="15" fill="rgb(209,38,44)"/><text x="5.4805%" y="239.50"></text></g><g><title>[[kernel.kallsyms]] (387 samples, 0.23%)</title><rect x="5.2311%" y="213" width="0.2346%" height="15" fill="rgb(236,212,23)"/><text x="5.4811%" y="223.50"></text></g><g><title>[[kernel.kallsyms]] (387 samples, 0.23%)</title><rect x="5.2311%" y="197" width="0.2346%" height="15" fill="rgb(242,79,21)"/><text x="5.4811%" y="207.50"></text></g><g><title>[[kernel.kallsyms]] (386 samples, 0.23%)</title><rect x="5.2317%" y="181" width="0.2340%" height="15" fill="rgb(211,96,35)"/><text x="5.4817%" y="191.50"></text></g><g><title>[[kernel.kallsyms]] (385 samples, 0.23%)</title><rect x="5.2323%" y="165" width="0.2334%" height="15" fill="rgb(253,215,40)"/><text x="5.4823%" y="175.50"></text></g><g><title>[[kernel.kallsyms]] (367 samples, 0.22%)</title><rect x="5.2432%" y="149" width="0.2225%" height="15" fill="rgb(211,81,21)"/><text x="5.4932%" y="159.50"></text></g><g><title>[[kernel.kallsyms]] (364 samples, 0.22%)</title><rect x="5.2450%" y="133" width="0.2207%" height="15" fill="rgb(208,190,38)"/><text x="5.4950%" y="143.50"></text></g><g><title>[[kernel.kallsyms]] (363 samples, 0.22%)</title><rect x="5.2456%" y="117" width="0.2201%" height="15" fill="rgb(235,213,38)"/><text x="5.4956%" y="127.50"></text></g><g><title>[[kernel.kallsyms]] (359 samples, 0.22%)</title><rect x="5.2480%" y="101" width="0.2177%" height="15" fill="rgb(237,122,38)"/><text x="5.4980%" y="111.50"></text></g><g><title>[[kernel.kallsyms]] (349 samples, 0.21%)</title><rect x="5.2541%" y="85" width="0.2116%" height="15" fill="rgb(244,218,35)"/><text x="5.5041%" y="95.50"></text></g><g><title>[[kernel.kallsyms]] (344 samples, 0.21%)</title><rect x="5.2571%" y="69" width="0.2086%" height="15" fill="rgb(240,68,47)"/><text x="5.5071%" y="79.50"></text></g><g><title>[[kernel.kallsyms]] (344 samples, 0.21%)</title><rect x="5.2571%" y="53" width="0.2086%" height="15" fill="rgb(210,16,53)"/><text x="5.5071%" y="63.50"></text></g><g><title>[[kernel.kallsyms]] (323 samples, 0.20%)</title><rect x="5.2699%" y="37" width="0.1958%" height="15" fill="rgb(235,124,12)"/><text x="5.5199%" y="47.50"></text></g><g><title>&lt;rustasim::engine::Merger&lt;T,U&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,657 samples, 1.61%)</title><rect x="3.9530%" y="389" width="1.6109%" height="15" fill="rgb(224,169,11)"/><text x="4.2030%" y="399.50"></text></g><g><title>crossbeam_queue::spsc::Consumer&lt;T&gt;::pop (1,804 samples, 1.09%)</title><rect x="4.4702%" y="373" width="1.0937%" height="15" fill="rgb(250,166,2)"/><text x="4.7202%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (807 samples, 0.49%)</title><rect x="5.7191%" y="373" width="0.4893%" height="15" fill="rgb(242,216,29)"/><text x="5.9691%" y="383.50"></text></g><g><title>core::ptr::write (807 samples, 0.49%)</title><rect x="5.7191%" y="357" width="0.4893%" height="15" fill="rgb(230,116,27)"/><text x="5.9691%" y="367.50"></text></g><g><title>[[kernel.kallsyms]] (525 samples, 0.32%)</title><rect x="5.8901%" y="341" width="0.3183%" height="15" fill="rgb(228,99,48)"/><text x="6.1401%" y="351.50"></text></g><g><title>[[kernel.kallsyms]] (467 samples, 0.28%)</title><rect x="5.9253%" y="325" width="0.2831%" height="15" fill="rgb(253,11,6)"/><text x="6.1753%" y="335.50"></text></g><g><title>[[kernel.kallsyms]] (421 samples, 0.26%)</title><rect x="5.9531%" y="309" width="0.2552%" height="15" fill="rgb(247,143,39)"/><text x="6.2031%" y="319.50"></text></g><g><title>[[kernel.kallsyms]] (413 samples, 0.25%)</title><rect x="5.9580%" y="293" width="0.2504%" height="15" fill="rgb(236,97,10)"/><text x="6.2080%" y="303.50"></text></g><g><title>[[kernel.kallsyms]] (353 samples, 0.21%)</title><rect x="5.9944%" y="277" width="0.2140%" height="15" fill="rgb(233,208,19)"/><text x="6.2444%" y="287.50"></text></g><g><title>[[kernel.kallsyms]] (300 samples, 0.18%)</title><rect x="6.0265%" y="261" width="0.1819%" height="15" fill="rgb(216,164,2)"/><text x="6.2765%" y="271.50"></text></g><g><title>[[kernel.kallsyms]] (241 samples, 0.15%)</title><rect x="6.0623%" y="245" width="0.1461%" height="15" fill="rgb(220,129,5)"/><text x="6.3123%" y="255.50"></text></g><g><title>[[kernel.kallsyms]] (225 samples, 0.14%)</title><rect x="6.0720%" y="229" width="0.1364%" height="15" fill="rgb(242,17,10)"/><text x="6.3220%" y="239.50"></text></g><g><title>[[kernel.kallsyms]] (186 samples, 0.11%)</title><rect x="6.0956%" y="213" width="0.1128%" height="15" fill="rgb(242,107,0)"/><text x="6.3456%" y="223.50"></text></g><g><title>[[kernel.kallsyms]] (172 samples, 0.10%)</title><rect x="6.1041%" y="197" width="0.1043%" height="15" fill="rgb(251,28,31)"/><text x="6.3541%" y="207.50"></text></g><g><title>[[kernel.kallsyms]] (165 samples, 0.10%)</title><rect x="6.1084%" y="181" width="0.1000%" height="15" fill="rgb(233,223,10)"/><text x="6.3584%" y="191.50"></text></g><g><title>crossbeam_queue::spsc::Producer&lt;T&gt;::push (995 samples, 0.60%)</title><rect x="5.6167%" y="389" width="0.6033%" height="15" fill="rgb(215,21,27)"/><text x="5.8667%" y="399.50"></text></g><g><title>&lt;rustasim::network::router::Router as rustasim::worker::Advancer&lt;u64,u64&gt;&gt;::advance (4,824 samples, 2.92%)</title><rect x="3.3031%" y="405" width="2.9247%" height="15" fill="rgb(232,23,21)"/><text x="3.5531%" y="415.50">&lt;r..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::read (241 samples, 0.15%)</title><rect x="6.6752%" y="357" width="0.1461%" height="15" fill="rgb(244,5,23)"/><text x="6.9252%" y="367.50"></text></g><g><title>core::ptr::read (241 samples, 0.15%)</title><rect x="6.6752%" y="341" width="0.1461%" height="15" fill="rgb(226,81,46)"/><text x="6.9252%" y="351.50"></text></g><g><title>&lt;rustasim::engine::Merger&lt;T,U&gt; as core::iter::traits::iterator::Iterator&gt;::next (815 samples, 0.49%)</title><rect x="6.4236%" y="389" width="0.4941%" height="15" fill="rgb(247,70,30)"/><text x="6.6736%" y="399.50"></text></g><g><title>crossbeam_queue::spsc::Consumer&lt;T&gt;::pop (574 samples, 0.35%)</title><rect x="6.5697%" y="373" width="0.3480%" height="15" fill="rgb(212,68,19)"/><text x="6.8197%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (567 samples, 0.34%)</title><rect x="6.9353%" y="373" width="0.3438%" height="15" fill="rgb(240,187,13)"/><text x="7.1853%" y="383.50"></text></g><g><title>core::ptr::write (567 samples, 0.34%)</title><rect x="6.9353%" y="357" width="0.3438%" height="15" fill="rgb(223,113,26)"/><text x="7.1853%" y="367.50"></text></g><g><title>[[kernel.kallsyms]] (537 samples, 0.33%)</title><rect x="6.9535%" y="341" width="0.3256%" height="15" fill="rgb(206,192,2)"/><text x="7.2035%" y="351.50"></text></g><g><title>[[kernel.kallsyms]] (517 samples, 0.31%)</title><rect x="6.9656%" y="325" width="0.3135%" height="15" fill="rgb(241,108,4)"/><text x="7.2156%" y="335.50"></text></g><g><title>[[kernel.kallsyms]] (490 samples, 0.30%)</title><rect x="6.9820%" y="309" width="0.2971%" height="15" fill="rgb(247,173,49)"/><text x="7.2320%" y="319.50"></text></g><g><title>[[kernel.kallsyms]] (488 samples, 0.30%)</title><rect x="6.9832%" y="293" width="0.2959%" height="15" fill="rgb(224,114,35)"/><text x="7.2332%" y="303.50"></text></g><g><title>[[kernel.kallsyms]] (446 samples, 0.27%)</title><rect x="7.0087%" y="277" width="0.2704%" height="15" fill="rgb(245,159,27)"/><text x="7.2587%" y="287.50"></text></g><g><title>[[kernel.kallsyms]] (418 samples, 0.25%)</title><rect x="7.0257%" y="261" width="0.2534%" height="15" fill="rgb(245,172,44)"/><text x="7.2757%" y="271.50"></text></g><g><title>[[kernel.kallsyms]] (395 samples, 0.24%)</title><rect x="7.0396%" y="245" width="0.2395%" height="15" fill="rgb(236,23,11)"/><text x="7.2896%" y="255.50"></text></g><g><title>[[kernel.kallsyms]] (380 samples, 0.23%)</title><rect x="7.0487%" y="229" width="0.2304%" height="15" fill="rgb(205,117,38)"/><text x="7.2987%" y="239.50"></text></g><g><title>[[kernel.kallsyms]] (341 samples, 0.21%)</title><rect x="7.0724%" y="213" width="0.2067%" height="15" fill="rgb(237,72,25)"/><text x="7.3224%" y="223.50"></text></g><g><title>[[kernel.kallsyms]] (335 samples, 0.20%)</title><rect x="7.0760%" y="197" width="0.2031%" height="15" fill="rgb(244,70,9)"/><text x="7.3260%" y="207.50"></text></g><g><title>[[kernel.kallsyms]] (335 samples, 0.20%)</title><rect x="7.0760%" y="181" width="0.2031%" height="15" fill="rgb(217,125,39)"/><text x="7.3260%" y="191.50"></text></g><g><title>[[kernel.kallsyms]] (332 samples, 0.20%)</title><rect x="7.0778%" y="165" width="0.2013%" height="15" fill="rgb(235,36,10)"/><text x="7.3278%" y="175.50"></text></g><g><title>[[kernel.kallsyms]] (330 samples, 0.20%)</title><rect x="7.0790%" y="149" width="0.2001%" height="15" fill="rgb(251,123,47)"/><text x="7.3290%" y="159.50"></text></g><g><title>[[kernel.kallsyms]] (329 samples, 0.20%)</title><rect x="7.0796%" y="133" width="0.1995%" height="15" fill="rgb(221,13,13)"/><text x="7.3296%" y="143.50"></text></g><g><title>crossbeam_queue::spsc::Producer&lt;T&gt;::push (589 samples, 0.36%)</title><rect x="6.9287%" y="389" width="0.3571%" height="15" fill="rgb(238,131,9)"/><text x="7.1787%" y="399.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (220 samples, 0.13%)</title><rect x="7.3422%" y="389" width="0.1334%" height="15" fill="rgb(211,50,8)"/><text x="7.5922%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_mut (220 samples, 0.13%)</title><rect x="7.3422%" y="373" width="0.1334%" height="15" fill="rgb(245,182,24)"/><text x="7.5922%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (179 samples, 0.11%)</title><rect x="7.3670%" y="357" width="0.1085%" height="15" fill="rgb(242,14,37)"/><text x="7.6170%" y="367.50"></text></g><g><title>&lt;rustasim::network::server::Server as rustasim::worker::Advancer&lt;u64,u64&gt;&gt;::advance (2,226 samples, 1.35%)</title><rect x="6.2278%" y="405" width="1.3496%" height="15" fill="rgb(246,228,12)"/><text x="6.4778%" y="415.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (168 samples, 0.10%)</title><rect x="7.4755%" y="389" width="0.1019%" height="15" fill="rgb(213,55,15)"/><text x="7.7255%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (168 samples, 0.10%)</title><rect x="7.4755%" y="373" width="0.1019%" height="15" fill="rgb(209,9,3)"/><text x="7.7255%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::insert (167 samples, 0.10%)</title><rect x="7.4761%" y="357" width="0.1013%" height="15" fill="rgb(230,59,30)"/><text x="7.7261%" y="367.50"></text></g><g><title>__GI___pthread_mutex_unlock (53,947 samples, 32.71%)</title><rect x="7.5774%" y="405" width="32.7074%" height="15" fill="rgb(209,121,21)"/><text x="7.8274%" y="415.50">__GI___pthread_mutex_unlock</text></g><g><title>__lll_unlock_wake (53,538 samples, 32.46%)</title><rect x="7.8254%" y="389" width="32.4595%" height="15" fill="rgb(220,109,13)"/><text x="8.0754%" y="399.50">__lll_unlock_wake</text></g><g><title>[[kernel.kallsyms]] (53,494 samples, 32.43%)</title><rect x="7.8520%" y="373" width="32.4328%" height="15" fill="rgb(232,18,1)"/><text x="8.1020%" y="383.50">[[kernel.kallsyms]]</text></g><g><title>[[kernel.kallsyms]] (53,054 samples, 32.17%)</title><rect x="8.1188%" y="357" width="32.1660%" height="15" fill="rgb(215,41,42)"/><text x="8.3688%" y="367.50">[[kernel.kallsyms]]</text></g><g><title>[[kernel.kallsyms]] (52,416 samples, 31.78%)</title><rect x="8.5056%" y="341" width="31.7792%" height="15" fill="rgb(224,123,36)"/><text x="8.7556%" y="351.50">[[kernel.kallsyms]]</text></g><g><title>[[kernel.kallsyms]] (52,391 samples, 31.76%)</title><rect x="8.5208%" y="325" width="31.7641%" height="15" fill="rgb(240,125,3)"/><text x="8.7708%" y="335.50">[[kernel.kallsyms]]</text></g><g><title>[[kernel.kallsyms]] (52,360 samples, 31.75%)</title><rect x="8.5396%" y="309" width="31.7453%" height="15" fill="rgb(205,98,50)"/><text x="8.7896%" y="319.50">[[kernel.kallsyms]]</text></g><g><title>[[kernel.kallsyms]] (51,403 samples, 31.17%)</title><rect x="9.1198%" y="293" width="31.1650%" height="15" fill="rgb(205,185,37)"/><text x="9.3698%" y="303.50">[[kernel.kallsyms]]</text></g><g><title>[[kernel.kallsyms]] (50,634 samples, 30.70%)</title><rect x="9.5860%" y="277" width="30.6988%" height="15" fill="rgb(238,207,15)"/><text x="9.8360%" y="287.50">[[kernel.kallsyms]]</text></g><g><title>[[kernel.kallsyms]] (2,505 samples, 1.52%)</title><rect x="38.7661%" y="261" width="1.5188%" height="15" fill="rgb(213,199,42)"/><text x="39.0161%" y="271.50"></text></g><g><title>[[kernel.kallsyms]] (1,461 samples, 0.89%)</title><rect x="39.3990%" y="245" width="0.8858%" height="15" fill="rgb(235,201,11)"/><text x="39.6490%" y="255.50"></text></g><g><title>[[kernel.kallsyms]] (1,349 samples, 0.82%)</title><rect x="39.4670%" y="229" width="0.8179%" height="15" fill="rgb(207,46,11)"/><text x="39.7170%" y="239.50"></text></g><g><title>[[kernel.kallsyms]] (845 samples, 0.51%)</title><rect x="39.7725%" y="213" width="0.5123%" height="15" fill="rgb(241,35,35)"/><text x="40.0225%" y="223.50"></text></g><g><title>[[kernel.kallsyms]] (382 samples, 0.23%)</title><rect x="40.0532%" y="197" width="0.2316%" height="15" fill="rgb(243,32,47)"/><text x="40.3032%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::sift_up (188 samples, 0.11%)</title><rect x="40.5989%" y="341" width="0.1140%" height="15" fill="rgb(247,202,23)"/><text x="40.8489%" y="351.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::sift_down_to_bottom (884 samples, 0.54%)</title><rect x="40.3388%" y="357" width="0.5360%" height="15" fill="rgb(219,102,11)"/><text x="40.5888%" y="367.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (1,267 samples, 0.77%)</title><rect x="40.2848%" y="405" width="0.7682%" height="15" fill="rgb(243,110,44)"/><text x="40.5348%" y="415.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1,216 samples, 0.74%)</title><rect x="40.3158%" y="389" width="0.7372%" height="15" fill="rgb(222,74,54)"/><text x="40.5658%" y="399.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop::_{{closure}} (1,183 samples, 0.72%)</title><rect x="40.3358%" y="373" width="0.7172%" height="15" fill="rgb(216,99,12)"/><text x="40.5858%" y="383.50"></text></g><g><title>core::mem::swap (294 samples, 0.18%)</title><rect x="40.8748%" y="357" width="0.1782%" height="15" fill="rgb(226,22,26)"/><text x="41.1248%" y="367.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (294 samples, 0.18%)</title><rect x="40.8748%" y="341" width="0.1782%" height="15" fill="rgb(217,163,10)"/><text x="41.1248%" y="351.50"></text></g><g><title>core::ptr::read (269 samples, 0.16%)</title><rect x="40.8899%" y="325" width="0.1631%" height="15" fill="rgb(213,25,53)"/><text x="41.1399%" y="335.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::new (442 samples, 0.27%)</title><rect x="41.0803%" y="373" width="0.2680%" height="15" fill="rgb(252,105,26)"/><text x="41.3303%" y="383.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::sift_up (641 samples, 0.39%)</title><rect x="41.0542%" y="389" width="0.3886%" height="15" fill="rgb(220,39,43)"/><text x="41.3042%" y="399.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::push (678 samples, 0.41%)</title><rect x="41.0530%" y="405" width="0.4111%" height="15" fill="rgb(229,68,48)"/><text x="41.3030%" y="415.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (178 samples, 0.11%)</title><rect x="41.6987%" y="389" width="0.1079%" height="15" fill="rgb(252,8,32)"/><text x="41.9487%" y="399.50"></text></g><g><title>std::sys_common::poison::Flag::borrow (178 samples, 0.11%)</title><rect x="41.6987%" y="373" width="0.1079%" height="15" fill="rgb(223,20,43)"/><text x="41.9487%" y="383.50"></text></g><g><title>__GI___pthread_mutex_lock (95,851 samples, 58.11%)</title><rect x="41.8133%" y="357" width="58.1134%" height="15" fill="rgb(229,81,49)"/><text x="42.0633%" y="367.50">__GI___pthread_mutex_lock</text></g><g><title>__lll_lock_wait (95,159 samples, 57.69%)</title><rect x="42.2328%" y="341" width="57.6938%" height="15" fill="rgb(236,28,36)"/><text x="42.4828%" y="351.50">__lll_lock_wait</text></g><g><title>[[kernel.kallsyms]] (94,417 samples, 57.24%)</title><rect x="42.6827%" y="325" width="57.2439%" height="15" fill="rgb(249,185,26)"/><text x="42.9327%" y="335.50">[[kernel.kallsyms]]</text></g><g><title>[[kernel.kallsyms]] (93,505 samples, 56.69%)</title><rect x="43.2356%" y="309" width="56.6910%" height="15" fill="rgb(249,174,33)"/><text x="43.4856%" y="319.50">[[kernel.kallsyms]]</text></g><g><title>[[kernel.kallsyms]] (92,415 samples, 56.03%)</title><rect x="43.8965%" y="293" width="56.0301%" height="15" fill="rgb(233,201,37)"/><text x="44.1465%" y="303.50">[[kernel.kallsyms]]</text></g><g><title>[[kernel.kallsyms]] (92,369 samples, 56.00%)</title><rect x="43.9244%" y="277" width="56.0023%" height="15" fill="rgb(221,78,26)"/><text x="44.1744%" y="287.50">[[kernel.kallsyms]]</text></g><g><title>[[kernel.kallsyms]] (92,291 samples, 55.95%)</title><rect x="43.9717%" y="261" width="55.9550%" height="15" fill="rgb(250,127,30)"/><text x="44.2217%" y="271.50">[[kernel.kallsyms]]</text></g><g><title>[[kernel.kallsyms]] (91,970 samples, 55.76%)</title><rect x="44.1663%" y="245" width="55.7603%" height="15" fill="rgb(230,49,44)"/><text x="44.4163%" y="255.50">[[kernel.kallsyms]]</text></g><g><title>[[kernel.kallsyms]] (90,175 samples, 54.67%)</title><rect x="45.2546%" y="229" width="54.6721%" height="15" fill="rgb(229,67,23)"/><text x="45.5046%" y="239.50">[[kernel.kallsyms]]</text></g><g><title>[[kernel.kallsyms]] (88,662 samples, 53.75%)</title><rect x="46.1719%" y="213" width="53.7547%" height="15" fill="rgb(249,83,47)"/><text x="46.4219%" y="223.50">[[kernel.kallsyms]]</text></g><g><title>[[kernel.kallsyms]] (6,713 samples, 4.07%)</title><rect x="95.8566%" y="197" width="4.0700%" height="15" fill="rgb(215,43,3)"/><text x="96.1066%" y="207.50">[[ke..</text></g><g><title>[[kernel.kallsyms]] (5,964 samples, 3.62%)</title><rect x="96.3107%" y="181" width="3.6159%" height="15" fill="rgb(238,154,13)"/><text x="96.5607%" y="191.50">[[ke..</text></g><g><title>[[kernel.kallsyms]] (5,766 samples, 3.50%)</title><rect x="96.4308%" y="165" width="3.4959%" height="15" fill="rgb(219,56,2)"/><text x="96.6808%" y="175.50">[[k..</text></g><g><title>[[kernel.kallsyms]] (5,322 samples, 3.23%)</title><rect x="96.7000%" y="149" width="3.2267%" height="15" fill="rgb(233,0,4)"/><text x="96.9500%" y="159.50">[[k..</text></g><g><title>[[kernel.kallsyms]] (4,680 samples, 2.84%)</title><rect x="97.0892%" y="133" width="2.8374%" height="15" fill="rgb(235,30,7)"/><text x="97.3392%" y="143.50">[[..</text></g><g><title>[[kernel.kallsyms]] (4,375 samples, 2.65%)</title><rect x="97.2741%" y="117" width="2.6525%" height="15" fill="rgb(250,79,13)"/><text x="97.5241%" y="127.50">[[..</text></g><g><title>[[kernel.kallsyms]] (195 samples, 0.12%)</title><rect x="99.8084%" y="101" width="0.1182%" height="15" fill="rgb(211,146,34)"/><text x="100.0584%" y="111.50"></text></g><g><title>std::panic::catch_unwind (159,528 samples, 96.72%)</title><rect x="3.2491%" y="533" width="96.7200%" height="15" fill="rgb(228,22,38)"/><text x="3.4991%" y="543.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (159,528 samples, 96.72%)</title><rect x="3.2491%" y="517" width="96.7200%" height="15" fill="rgb(235,168,5)"/><text x="3.4991%" y="527.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (159,528 samples, 96.72%)</title><rect x="3.2491%" y="501" width="96.7200%" height="15" fill="rgb(221,155,16)"/><text x="3.4991%" y="511.50">std::panicking::try::do_call</text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (159,528 samples, 96.72%)</title><rect x="3.2491%" y="485" width="96.7200%" height="15" fill="rgb(215,215,53)"/><text x="3.4991%" y="495.50">&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked::_{{closure}}::_{{closure}} (159,528 samples, 96.72%)</title><rect x="3.2491%" y="469" width="96.7200%" height="15" fill="rgb(223,4,10)"/><text x="3.4991%" y="479.50">std::thread::Builder::spawn_unchecked::_{{closure}}::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (159,528 samples, 96.72%)</title><rect x="3.2491%" y="453" width="96.7200%" height="15" fill="rgb(234,103,6)"/><text x="3.4991%" y="463.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>rustasim::start::_{{closure}} (159,528 samples, 96.72%)</title><rect x="3.2491%" y="437" width="96.7200%" height="15" fill="rgb(227,97,0)"/><text x="3.4991%" y="447.50">rustasim::start::_{{closure}}</text></g><g><title>rustasim::worker::run (159,528 samples, 96.72%)</title><rect x="3.2491%" y="421" width="96.7200%" height="15" fill="rgb(234,150,53)"/><text x="3.4991%" y="431.50">rustasim::worker::run</text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (96,350 samples, 58.42%)</title><rect x="41.5532%" y="405" width="58.4159%" height="15" fill="rgb(228,201,54)"/><text x="41.8032%" y="415.50">std::sync::mutex::Mutex&lt;T&gt;::lock</text></g><g><title>std::sys_common::mutex::Mutex::raw_lock (95,932 samples, 58.16%)</title><rect x="41.8066%" y="389" width="58.1625%" height="15" fill="rgb(222,22,37)"/><text x="42.0566%" y="399.50">std::sys_common::mutex::Mutex::raw_lock</text></g><g><title>std::sys::unix::mutex::Mutex::lock (95,932 samples, 58.16%)</title><rect x="41.8066%" y="373" width="58.1625%" height="15" fill="rgb(237,53,32)"/><text x="42.0566%" y="383.50">std::sys::unix::mutex::Mutex::lock</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (159,564 samples, 96.74%)</title><rect x="3.2491%" y="597" width="96.7418%" height="15" fill="rgb(233,25,53)"/><text x="3.4991%" y="607.50">&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (159,564 samples, 96.74%)</title><rect x="3.2491%" y="581" width="96.7418%" height="15" fill="rgb(210,40,34)"/><text x="3.4991%" y="591.50">&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (159,564 samples, 96.74%)</title><rect x="3.2491%" y="565" width="96.7418%" height="15" fill="rgb(241,220,44)"/><text x="3.4991%" y="575.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked::_{{closure}} (159,564 samples, 96.74%)</title><rect x="3.2491%" y="549" width="96.7418%" height="15" fill="rgb(235,28,35)"/><text x="3.4991%" y="559.50">std::thread::Builder::spawn_unchecked::_{{closure}}</text></g><g><title>all (164,938 samples, 100%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(210,56,17)"/><text x="0.2500%" y="687.50"></text></g><g><title>rustasim (164,933 samples, 100.00%)</title><rect x="0.0030%" y="661" width="99.9970%" height="15" fill="rgb(224,130,29)"/><text x="0.2530%" y="671.50">rustasim</text></g><g><title>clone (159,774 samples, 96.87%)</title><rect x="3.1309%" y="645" width="96.8691%" height="15" fill="rgb(235,212,8)"/><text x="3.3809%" y="655.50">clone</text></g><g><title>start_thread (159,581 samples, 96.75%)</title><rect x="3.2479%" y="629" width="96.7521%" height="15" fill="rgb(223,33,50)"/><text x="3.4979%" y="639.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (159,579 samples, 96.75%)</title><rect x="3.2491%" y="613" width="96.7509%" height="15" fill="rgb(219,149,13)"/><text x="3.4991%" y="623.50">std::sys::unix::thread::Thread::new::thread_start</text></g></svg></svg>